# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import sqlalchemy as sa
from paginate_sqlalchemy import SqlalchemyOrmPage
from ..meta import DBSession
from ..blog_record import BlogRecord


class BlogRecordService(object):
    query = DBSession.query(BlogRecord).filter(BlogRecord.deleted == False)

    @classmethod
    def all(cls):
        return cls.query.order_by(sa.desc(BlogRecord.created))

    @classmethod
    def first_posts(cls):
        return cls.query.order_by(sa.desc(BlogRecord.created)).limit(5)

    @classmethod
    def by_id(cls, id):
        return cls.query.filter(BlogRecord.id == id).first()

    @classmethod
    def by_slug(cls, slug):
        return cls.query.filter(BlogRecord.slug == slug).first()

    @classmethod
    def create(cls, data):
        entry = BlogRecord(**data)
        DBSession.add(entry)
        return entry

    @classmethod
    def get_paginator(cls, request, page=1):
        query = cls.query.order_by(sa.desc(BlogRecord.created))
        query_params = request.GET.mixed()

        def url_maker(link_page):
            # replace page param with values generated by paginator
            query_params['page'] = link_page
            return request.current_route_url(_query=query_params)

        return SqlalchemyOrmPage(query, page, items_per_page=10, url_maker=url_maker)
